{"version":3,"sources":["config/firebase.js","component/Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","margin","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","onClose","e","className","value","placeholder","todo","text","onChange","target","onClick","collection","doc","id","set","timestamp","FieldValue","serverTimestamp","merge","List","ListItem","ListItemText","primary","secondary","IconButton","event","delete","fontSize","color","App","todos","setTodo","useEffect","orderBy","onSnapshot","snapshot","console","log","docs","map","data","FormControl","InputLabel","htmlFor","Input","type","Button","disabled","preventDefault","add","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+TAgCeA,EAbQC,IAASC,cAAc,CAC5CC,OAAQ,0CACRC,WAAY,6BACZC,YAAa,oCACbC,UAAW,aACXC,cAAe,yBACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGSC,Y,uFCpBpBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,SAAU,WACVC,MAAO,IACPC,gBAAiBJ,EAAMK,QAAQC,WAAWL,MAC1CM,OAAQ,iBACRC,UAAWR,EAAMS,QAAQ,GACzBC,QAASV,EAAMW,QAAQ,EAAG,EAAG,IAE/BC,OAAQ,CACNA,OAAQZ,EAAMW,QAAQ,QAmEXE,MA/Df,SAAcC,GACX,IAAMC,EAAUjB,IADE,EAGKkB,oBAAS,GAHd,mBAGbC,EAHa,KAGNC,EAHM,OAIKF,mBAAS,IAJd,mBAIbG,EAJa,KAIPC,EAJO,KAqBjB,OACE,6BACE,oCACE,kBAACC,EAAA,EAAD,CAAOJ,KAAMA,EAAMK,QAAS,SAACC,GAAD,OAAOL,GAAQ,KACzC,yBAAKM,UAAWT,EAAQd,OACtB,4CACA,2BACEwB,MAAON,EACPO,YAAaZ,EAAMa,KAAKC,KACxBC,SAAU,SAACN,GAAD,OAAOH,EAASG,EAAEO,OAAOL,UAErC,4BAAQM,QA1BA,WAElB7C,EAAG8C,WAAW,SAASC,IAAInB,EAAMa,KAAKO,IAAIC,IACxC,CACEP,KAAMT,EACNiB,UAAWjD,IAASU,UAAUwC,WAAWC,mBAE3C,CAAEC,OAAO,IAEXrB,GAAQ,KAiBE,UACA,4BAAQa,QAAS,SAACR,GAAD,OAAOL,GAAQ,KAAhC,YAIJ,kBAACsB,EAAA,EAAD,CAAMhB,UAAU,cACd,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAcC,QAAS7B,EAAMa,KAAKC,KAAMgB,UAAU,UAElD,kBAACC,EAAA,EAAD,CACEd,QAAS,SAACe,GAAD,OACP5D,EAAG8C,WAAW,SAASC,IAAInB,EAAMa,KAAKO,IAAIa,UAE5CvB,UAAWT,EAAQH,QAEnB,kBAAC,IAAD,CAAYoC,SAAS,SAASC,MAAM,eAGtC,kBAACJ,EAAA,EAAD,CACEd,QAAS,SAACR,GAAD,OAAOL,GAAQ,IACxBM,UAAWT,EAAQH,QAEnB,kBAAC,IAAD,CAAUoC,SAAS,SAASC,MAAM,kB,MCCnCC,MApEf,WAAgB,IAAD,EACYlC,mBAAS,CAAC,MAAQ,QAD9B,mBACNmC,EADM,KACCC,EADD,OAEapC,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KA4Bb,OAvBAiC,qBAAU,WAEZnE,EAAG8C,WAAW,SAASsB,QAAQ,YAAY,QAAQC,YAAW,SAAAC,GAE5DC,QAAQC,IAAIF,EAASG,KAAKC,KAAI,SAAA3B,GAAG,OAAIA,EAAI4B,WACzCT,EAAQI,EAASG,KAAKC,KAAI,SAAA3B,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIN,KAAMK,EAAI4B,OAAOjC,eAE7D,IAiBD,yBAAKJ,UAAU,OACb,6CACA,8BACE,kBAACsC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,YAApB,iBACA,kBAACC,EAAA,EAAD,CACExC,MAAON,EACPU,SAAU,SAACiB,GAAD,OAAW1B,EAAS0B,EAAMhB,OAAOL,QAC3CyC,KAAK,UAUT,kBAACC,EAAA,EAAD,CACEC,UAAWjD,EACX+C,KAAK,SACLnC,QApCS,SAACe,GAChBA,EAAMuB,iBAENnF,EAAG8C,WAAW,SAASsC,IAAI,CACzB1C,KAAOT,EACPiB,UAAYjD,IAASU,UAAUwC,WAAWC,oBAE3ClB,EAAS,KA8BJmD,QAAQ,YACRtB,MAAM,aALR,WAOW,KAGX,wBAAIzB,UAAU,WACX2B,EAAMS,KAAI,SAACjC,GAAD,OACT,kBAAC,EAAD,CAAMA,KAAMA,WC1DJ6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.baa8f94b.chunk.js","sourcesContent":["// import * as firebase from 'firebase';\r\n// import 'firebase/database';\r\n// import 'firebase/auth'\r\n\r\n// var firebaseConfig = {\r\n//     apiKey: \"AIzaSyDSBfzvwXZcPZuZgVQYdgW8drEPv0d0EB8\",\r\n//     authDomain: \"todo-1856e.firebaseapp.com\",\r\n//     databaseURL: \"https://todo-1856e.firebaseio.com\",\r\n//     projectId: \"todo-1856e\",\r\n//     storageBucket: \"todo-1856e.appspot.com\",\r\n//     messagingSenderId: \"257924799241\",\r\n//     appId: \"1:257924799241:web:be5088f5da0bd0e3f111d8\",\r\n//     measurementId: \"G-BCYEV87LH7\",\r\n// };\r\n// // Initialize Firebase\r\n// export default firebase.initializeApp(firebaseConfig);\r\n\r\nimport firebase from 'firebase';\r\n\r\nconst firebaseConfig = firebase.initializeApp({\r\n  apiKey: \"AIzaSyAL7Nl1uGwnVVCDYcnbOyLUeCbyiamSSqg\",\r\n  authDomain: \"todo-3023d.firebaseapp.com\",\r\n  databaseURL: \"https://todo-3023d.firebaseio.com\",\r\n  projectId: \"todo-3023d\",\r\n  storageBucket: \"todo-3023d.appspot.com\",\r\n  messagingSenderId: \"317723274136\",\r\n  appId: \"1:317723274136:web:6cf7df4e2475323716d9ed\",\r\n  measurementId: \"G-2EHYMLC9HJ\",\r\n});\r\n\r\nconst db = firebaseConfig.firestore();\r\n\r\nexport default db;","import React, { useState } from 'react'\r\nimport './Todo.css';\r\nimport db from '../config/firebase'\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport firebase from \"firebase\";\r\nimport { ListItemText, List, ListItem, Button, Modal, IconButton  } from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: \"2px solid #000\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nfunction Todo(props) {\r\n   const classes = useStyles();\r\n\r\n  const[open , setOpen] = useState(false)\r\n  const[input,setInput] = useState('');\r\n\r\n  const update_todo = () => {\r\n\r\n    db.collection(\"todos\").doc(props.todo.id).set(\r\n      {\r\n        text: input,\r\n        timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      },\r\n      { merge: true }\r\n    );\r\n    setOpen(false);\r\n  }\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n    return (\r\n      <div>\r\n        <>\r\n          <Modal open={open} onClose={(e) => setOpen(false)}>\r\n            <div className={classes.paper}>\r\n              <h1>I am a modal</h1>\r\n              <input\r\n                value={input}\r\n                placeholder={props.todo.text}\r\n                onChange={(e) => setInput(e.target.value)}\r\n              />\r\n              <button onClick={update_todo}>Update</button>\r\n              <button onClick={(e) => setOpen(false)}>Cancel</button>\r\n            </div>\r\n            {/* <button onClick={event => setOpen(false)}>Cancel</button> */}\r\n          </Modal>\r\n          <List className=\"todo__list\">\r\n            <ListItem>\r\n              <ListItemText primary={props.todo.text} secondary=\"Todos\" />\r\n\r\n              <IconButton\r\n                onClick={(event) =>\r\n                  db.collection(\"todos\").doc(props.todo.id).delete()\r\n                }\r\n                className={classes.margin}\r\n              >\r\n                <DeleteIcon fontSize=\"medium\" color=\"secondary\" />\r\n              </IconButton>\r\n\r\n              <IconButton\r\n                onClick={(e) => setOpen(true)}\r\n                className={classes.margin}\r\n              >\r\n                <EditIcon fontSize=\"medium\" color=\"primary\" />\r\n              </IconButton>\r\n            </ListItem>\r\n          </List>\r\n        </>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Todo\r\n","import React, { useState, useEffect } from 'react';\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core';\nimport Todo from './component/Todo'\nimport db from './config/firebase';\nimport firebase from \"firebase\";\nimport './component/Todo.css'\n\n\nimport './App.css';\n// import db from './config/firebase';\n\nfunction App() {\n  const [todos, setTodo] = useState(['abc' , 'def']);\n  const [input, setInput] = useState('');\n\n  // when app loads we need to listen to database and fetch todo \n  useEffect(() => {\n    // this code here ... fires when app.js loads\ndb.collection('todos').orderBy('timestamp','desc').onSnapshot(snapshot => {\n  // return the array of objects\n  console.log(snapshot.docs.map(doc => doc.data()));\n  setTodo(snapshot.docs.map(doc => ({id: doc.id, text: doc.data().text})))\n})\n  }, []);\n\n  const add_todo = (event) => {\n    event.preventDefault(); //will stop from referesh\n\n    db.collection('todos').add({\n      text : input,\n      timestamp : firebase.firestore.FieldValue.serverTimestamp()\n    })\n     setInput(\"\");\n\n\n    // Manually without using database how to add \n    // setTodo([...todos, input])\n    // setInput('');  //clear up the input\n  }\n  return (\n    <div className=\"App\">\n      <h1>TODO APP LIST</h1>\n      <form>\n        <FormControl>\n          <InputLabel htmlFor=\"my-input\">Add todo here</InputLabel>\n          <Input\n            value={input}\n            onChange={(event) => setInput(event.target.value)}\n            type=\"text\"\n            \n          />\n        </FormControl>\n        {/* <input\n          value={input}\n          onChange={(event) => setInput(event.target.value)}\n          type=\"text\"\n          placeholder=\"Type text Here\"\n        /> */}\n        <Button\n          disabled={!input}\n          type=\"submit\"\n          onClick={add_todo}\n          variant=\"contained\"\n          color=\"secondary\"\n        >\n          Add Item{\" \"}\n        </Button>\n\n        <ul className=\"li-item\">\n          {todos.map((todo) => (\n            <Todo todo={todo} />\n\n          ))}\n        </ul>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './component/Todo.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}